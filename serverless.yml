service: serverless-goatfolio

provider:
  name: aws
  region: sa-east-1
  stage: ${env:STAGE, 'dev'}

resources:
  Resources:
    GoatfolioAppUserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        EmailVerificationSubject: "GOATFOLIO - Código de verificação"
        EmailVerificationMessage: "O código de confirmação é "
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          From: noreply@goatfolio.com.br
          SourceArn: arn:aws:ses:sa-east-1:810300526230:identity/noreply@goatfolio.com.br
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
            TemporaryPasswordValidityDays: 1
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
          Schema:
            - Name: email
              Required: true
              Mutable: true
        UsernameConfiguration:
          CaseSensitive: false
        UserPoolName: ${self:provider.stage}-GoatfolioPool

    InvestmentsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.stage}-Investments
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "subject"
            AttributeType: "S"
          - AttributeName: "date"
            AttributeType: "N"
          - AttributeName: "ticker"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "subject"
            KeyType: "HASH"
          - AttributeName: "id"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: subjectDateGlobalIndex
            KeySchema:
              - AttributeName: "subject"
                KeyType: "HASH"
              - AttributeName: "date"
                KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
          - IndexName: tickerSubjectGlobalIndex
            KeySchema:
              - AttributeName: "ticker"
                KeyType: "HASH"
              - AttributeName: "subject"
                KeyType: "RANGE"
            Projection:
              ProjectionType: ALL

    CeiImportRequestQueue:
      Type: AWS::SQS::Queue
      Properties:
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "CeiImportRequestDLQ"
              - "Arn"
          maxReceiveCount: 5
        QueueName: ${self:provider.stage}-CeiImportRequest
        VisibilityTimeout: 900

    CeiImportRequestDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-CeiImportRequestDLQ

    CeiImportResultQueue:
      Type: AWS::SQS::Queue
      Properties:
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "CeiImportResultDLQ"
              - "Arn"
          maxReceiveCount: 5
        QueueName: ${self:provider.stage}-CeiImportResult
        VisibilityTimeout: 300

    CeiImportResultDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-CeiImportResultDLQ

    NotificationMessagesConfigTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.stage}-NotificationMessagesConfig
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "message_key"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "message_key"
            KeyType: "HASH"

  #    MarketDataRDSCluster:
  #      Type: AWS::RDS::DBCluster
  #      Properties:
  #        MasterUsername: ${self:provider.dbmasteruser}
  #        MasterUserPassword: ${self:provider.dbmasterpassword}
  #        EnableHttpEndpoint: true
  #        DatabaseName: marketdata
  #        Engine: aurora-postgresql
  #        EngineMode: serverless
  #        ScalingConfiguration:
  #          AutoPause: true
  #          MaxCapacity: 4
  #          MinCapacity: 2
  #          SecondsUntilAutoPause: 900

  Outputs:
    GoatfolioAppUserPoolArnOutput:
      Value:
        Fn::GetAtt: [ GoatfolioAppUserPool, Arn ]
      Export:
        Name: ${self:provider.stage}-GoatfolioAppUserPoolArnOutput
    InvestmentsTableArnOutput:
      Value:
        Fn::GetAtt: [ InvestmentsTable, Arn ]
      Export:
        Name: ${self:provider.stage}-InvestmentsTableArnOutput
    CeiImportRequestQueueArn:
      Value:
        Fn::GetAtt: [ CeiImportRequestQueue, Arn ]
      Export:
        Name: ${self:provider.stage}-CeiImportRequestQueueArn
    CeiImportResultQueueArn:
      Value:
        Fn::GetAtt: [ CeiImportResultQueue, Arn ]
      Export:
        Name: ${self:provider.stage}-CeiImportResultQueueArn
    InvestmentTableStreamArn:
      Value:
        Fn::GetAtt: [ InvestmentsTable, StreamArn ]
      Export:
        Name: ${self:provider.stage}-InvestmentTableStreamArn
    NotificationMessagesConfigTableArnOutput:
      Value:
        Fn::GetAtt: [ NotificationMessagesConfigTable, Arn ]
      Export:
        Name: ${self:provider.stage}-NotificationMessagesConfigTableArnOutput