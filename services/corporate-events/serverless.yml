service: corporate-events

provider:
  name: aws
  memorySize: 512
  region: sa-east-1
  stage: ${env:STAGE, 'dev'}
  runtime: python3.8
  timeout: 900
  environment:
    PYTHONPATH: "src:libs"
    CORPORATE_BUCKET: ${self:provider.stage}-b3-corporate-events
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:BatchWriteItem
      Resource:
        - Fn::GetAtt: [ CorporateEventsTable, Arn ]
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [ CorporateEventsTable, Arn ]
              - '/index/*'
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - 'Fn::ImportValue': ${self:provider.stage}-TickerInfoTableArnOutput
        - Fn::Join:
            - ''
            - - 'Fn::ImportValue': ${self:provider.stage}-TickerInfoTableArnOutput
              - '/index/*'
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource: arn:aws:s3:::${self:provider.stage}-b3-corporate-events/*
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
      Resource:
        'Fn::ImportValue': ${self:provider.stage}-AddInvestmentQueueArn
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - 'Fn::ImportValue': ${self:provider.stage}-InvestmentsTableArnOutput
        - Fn::Join:
            - ''
            - - 'Fn::ImportValue': ${self:provider.stage}-TickerInfoTableArnOutput
              - '/index/*'
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
      Resource:
        'Fn::ImportValue': ${self:provider.stage}-EventsToNotifyQueueArn

package:
  exclude:
    - .cache/**
    - tests/**
    - test-env/**
    - node_modules/**
  include:
    - ../../libs/goatcommons/**

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    pythonBin: python3
    cacheLocation: '.cache/'

functions:
  processCorporateEventsFile:
    handler: handlers.process_corporate_events_file_handler
    events:
      - s3:
          bucket: ${self:provider.stage}-b3-corporate-events
          event: s3:ObjectCreated:*
          rules:
            - prefix: new/
            - suffix: .csv

  downloadTodayCorporateEvents:
    handler: handlers.download_today_corporate_events_handler
    events:
      - schedule: cron(0 23 ? * MON-FRI *)

  handleTodayCorporateEventsH:
    handler: handlers.handle_today_corporate_events_handler
    events:
      - schedule: cron(0 13 ? * * *)

  checkForApplicableCorpoEvents:
    handler: handlers.check_for_applicable_corporate_events_handler
    events:
      - stream:
          type: dynamodb
          arn:
            'Fn::ImportValue': ${self:provider.stage}-InvestmentTableStreamArn

resources:
  Resources:
    CorporateEventsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: "CorporateEvents"
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "isin_code"
            AttributeType: "S"
          - AttributeName: "with_date"
            AttributeType: "S"
          - AttributeName: "type"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "type"
            KeyType: "HASH"
          - AttributeName: "id"
            KeyType: "RANGE"
        LocalSecondaryIndexes:
          - IndexName: typeDateLocalIndex
            KeySchema:
              - AttributeName: "type"
                KeyType: "HASH"
              - AttributeName: "with_date"
                KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:
          - IndexName: isinDateGlobalIndex
            KeySchema:
              - AttributeName: "isin_code"
                KeyType: "HASH"
              - AttributeName: "with_date"
                KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
