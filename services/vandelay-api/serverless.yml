service: vandelay-api

provider:
  name: aws
  region: us-east-2
  stage: ${env:STAGE, 'dev'}
  runtime: python3.8
  environment:
    PYTHONPATH: "src:libs"
    BATCH_SAVE_ARN: ${env:BATCH_SAVE_ARN, 'arn:aws:lambda:us-east-2:831967415635:function:portfolio-api-dev-batchAddInvestments'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        Fn::GetAtt: [ ImportsTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        'Fn::ImportValue': ${self:provider:stage}-NotificationMessagesConfigTableArnOutput
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
      Resource:
        'Fn::ImportValue': ${self:provider.stage}-CeiImportRequestQueueArn
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
      Resource:
        'Fn::ImportValue': ${self:provider.stage}-PushNotificationRequestArnOutput
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: ${env:BATCH_SAVE_ARN, 'arn:aws:lambda:us-east-2:831967415635:function:portfolio-api-dev-batchAddInvestments'}

package:
  exclude:
    - .cache/**
    - tests/**
    - test-env/**
  include:
    - ../../libs/goatcommons/**
    - ../../libs/brutils/**

plugins:
  - serverless-python-requirements
  - serverless-domain-manager

custom:
  pythonRequirements:
    dockerizePip: true
    cacheLocation: '.cache/'
  customDomain:
    basePath: vandelay
    domainName: ${env:DOMAIN_NAME}
    stage: ${self:provider.stage}
    createRoute53Record: false

functions:
  ceiImportRequest:
    handler: src/handlers.cei_import_request_handler
    events:
      - http:
          path: cei
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  ceiImportResult:
    handler: src/handlers.cei_import_result_handler
    events:
      - sqs:
          arn:
            'Fn::ImportValue': ${self:provider.stage}-CeiImportResultQueueArn

  ceiImportStatus:
    handler: src/handlers.cei_import_status_handler
    events:
      - http:
          path: cei/latest
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: GoatCognitoAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - 'Fn::ImportValue': ${self:provider.stage}-GoatfolioAppUserPoolArnOutput

    ImportsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: "Imports"
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "subject"
            AttributeType: "S"
          - AttributeName: "datetime"
            AttributeType: "N"
          - AttributeName: "status"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "subject"
            KeyType: "HASH"
          - AttributeName: "datetime"
            KeyType: "RANGE"
        LocalSecondaryIndexes:
          - IndexName: subjectStatusLocalIndex
            KeySchema:
              - AttributeName: "subject"
                KeyType: "HASH"
              - AttributeName: "status"
                KeyType: "RANGE"
            Projection:
              ProjectionType: KEYS_ONLY
