service: performance-api

provider:
  name: aws
  timeout: 300
  region: us-east-2
  stage: ${env:STAGE, 'dev'}
  runtime: python3.8
  environment:
    PYTHONPATH: "src:libs"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        'Fn::ImportValue': ${self:provider.stage}-InvestmentsTableArnOutput
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        Fn::GetAtt: [ PortfolioTable, Arn ]
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:us-east-2:831967415635:secret:rds-db-credentials/cluster-B7EKYQNIWMBMYI6I6DNK6ICBEE/postgres-z9xJqf"
    - Effect: Allow
      Action:
        - rds-data:ExecuteStatement
      Resource: "arn:aws:rds:us-east-2:831967415635:cluster:serverless-goatfolio-dev-marketdatardscluster-dq6ryzdhjru0"

package:
  exclude:
    - .cache/**
    - tests/**
  include:
    - ../../libs/goatcommons/**
    - ../../libs/auroradata/**

plugins:
  - serverless-python-requirements
  - serverless-domain-manager

custom:
  pythonRequirements:
    dockerizePip: true
    cacheLocation: '.cache/'
  customDomain:
    basePath: 'performance'
    domainName: ${env:DOMAIN_NAME}
    stage: ${self:provider.stage}
    createRoute53Record: false

functions:
  getPerformance:
    handler: src/handlers.get_performance_handler
    events:
      - http:
          path: monthly
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  consolidatePortfolio:
    handler: src/handlers.consolidate_portfolio_handler
    events:
      - stream:
          type: dynamodb
          arn:
            'Fn::ImportValue': ${self:provider.stage}-InvestmentTableStreamArn

  performanceSummary:
    handler: src/handlers.performance_summary_handler
    events:
      - http:
          path: summary
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer


resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: GoatCognitoAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - 'Fn::ImportValue': ${self:provider.stage}-GoatfolioAppUserPoolArnOutput

    PortfolioTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: "Portfolio"
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "subject"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "subject"
            KeyType: "HASH"
