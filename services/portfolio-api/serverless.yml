service: portfolio-api

provider:
  name: aws
  region: us-east-2
  stage: ${env:STAGE, 'dev'}
  runtime: python3.8
  environment:
    PYTHONPATH: "src:libs"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        'Fn::ImportValue': ${self:provider.stage}-InvestmentsTableArnOutput

package:
  exclude:
    - .cache/**
    - tests/**
  include:
    - ../../libs/goatcommons/**

plugins:
  - serverless-python-requirements
  - serverless-domain-manager

custom:
  pythonRequirements:
    dockerizePip: true
    cacheLocation: '.cache/'
  customDomain:
    basePath: portfolio
    domainName: ${env:DOMAIN_NAME}
    stage: ${self:provider.stage}
    createRoute53Record: false

functions:
  getInvestments:
    handler: src/handlers.get_investments_handler
    events:
      - http:
          path: investments/
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  addInvestment:
    handler: src/handlers.add_investment_handler
    events:
      - http:
          path: investments/
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  editInvestment:
    handler: src/handlers.edit_investment_handler
    events:
      - http:
          path: investments/
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteInvestments:
    handler: src/handlers.delete_investment_handler
    events:
      - http:
          path: investments/{investmentid}
          request:
            parameters:
              paths:
                investmentid: true
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  batchAddInvestments:
    handler: src/handlers.batch_add_investments_handler

resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: GoatCognitoAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - 'Fn::ImportValue': ${self:provider.stage}-GoatfolioAppUserPoolArnOutput
