service: portfolio-api

provider:
  name: aws
  region: sa-east-1
  stage: ${env:STAGE, 'dev'}
  runtime: python3.8
  memorySize: 512
  vpc:
    securityGroupIds:
      - !GetAtt RedisSecurityGroup.GroupId
    subnetIds:
      - Fn::ImportValue: serverless-goatfolio-${self:provider.stage}-PrivateSubnet1ID
      - Fn::ImportValue: serverless-goatfolio-${self:provider.stage}-PrivateSubnet2ID
  environment:
    PYTHONPATH: "src:shared/libs"
    CORPORATE_EVENTS_URL: https://${env:DOMAIN_NAME}/corporate-events
    REDIS_HOST: !GetAtt RedisElasticacheCluster.RedisEndpoint.Address
    TICKER_BASE_API_URL: https://${env:DOMAIN_NAME}/ticker
  iamRoleStatements: ${file(resources/roles-cf-statements.yml)}
  endpointType: regional
  tracing:
    lambda: true
  apiGateway:
    apiKeys:
      - portfolio-api-key

package:
  exclude:
    - .cache/**
    - tests/**
    - node_modules/**
    - resources/**
  include:
    - ../shared/libs/goatcommons/**
    - ../shared/libs/event_notifier/**

plugins:
  - serverless-domain-manager
  - serverless-python-requirements

custom:
  pythonRequirements:
    pythonBin: python3.8
    cacheLocation: '.cache/'
  customDomain:
    basePath: portfolio
    domainName: ${env:DOMAIN_NAME}
    stage: ${self:provider.stage}
    createRoute53Record: false
    endpointType: 'regional'

functions:

  # Portfolio Start
  consolidatePortfolio:
    handler: src/adapters/inbound/sqs_handlers.consolidate_investment_handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ PortfolioAddOrUpdatedInvestmentSubscriber, Arn ]

  fixStockAverage:
    handler: src/adapters/inbound/api_gateway_handlers.fix_average_price_handler
    events:
      - http:
          path: stock/fix-average
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer


  stockDivergences:
    handler: src/adapters/inbound/api_gateway_handlers.get_stock_divergences_handler
    timeout: 15
    events:
      - http:
          path: stock/divergences
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  saveCeiAssetQuantities:
    handler: src/adapters/inbound/sqs_handlers.persist_cei_asset_quantities_handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ CEIInfoIntegrationQueue, Arn ]

  checkCorporateEvents:
    handler: src/adapters/inbound/sqs_handlers.check_for_applicable_corporate_events_handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ CheckCorporateEventsAddOrUpdatedInvestmentSubscriber, Arn ]

  # Portfolio End

  # Performance Start
  performanceSummary:
    handler: src/adapters/inbound/api_gateway_handlers.performance_summary_handler
#    provisionedConcurrency: 1
    events:
      - http:
          path: summary
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  performanceHistory:
    handler: src/adapters/inbound/api_gateway_handlers.performance_history_handler
    events:
      - http:
          path: history
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  portfolioPerformance:
    handler: src/adapters/inbound/api_gateway_handlers.calculate_group_position_summary_handler
#    provisionedConcurrency: 1
    events:
      - http:
          path: summary/grouped
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  tickerPerformance:
    handler: src/adapters/inbound/api_gateway_handlers.ticker_performance_handler
    events:
      - http:
          path: history/{ticker}
          request:
            parameters:
              paths:
                ticker: true
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Performance End

  # MANAGEMENT AND METRICS ENDPOINTS
  getCacheSnapshot:
    handler: src/adapters/inbound/private_api_gateway_handlers.get_cache_snapshot_handler
    events:
      - http:
          path: cache/snapshot
          method: get
          private: true

  invalidateCache:
    handler: src/adapters/inbound/private_api_gateway_handlers.invalidate_cache_handler
    events:
      - http:
          path: cache/invalidate
          method: post
          private: true

  newApplicableCorporateEventListener:
    handler: src/adapters/inbound/sqs_handlers.new_applicable_corporate_event_handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ NewApplicableCorporateEventsQueue, Arn ]

  processApplicableCorporateEventListener:
    handler: src/adapters/inbound/sqs_handlers.process_applicable_corporate_event_handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ ConsolidateApplicableCorporateEventQueue, Arn ]

resources:
  - ${file(resources/authorizer-cf-resources.yml)}
  - ${file(resources/elasticache-cf-resources.yml)}
  - ${file(resources/dynamo-cf-resources.yml)}
  - ${file(resources/sqs-cf-resources.yml)}
